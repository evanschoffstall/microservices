# TODO: no sleep, use while loop to check if sql server is up
# TODO: something more intutive than while loop for keeping the container alive like supervisord or similar
services:
  mysql:
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    build:
      context: .
      args:
        - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      dockerfile_inline: |
        FROM alpine:latest

        # Install MySQL
        RUN apk add --no-cache mysql mysql-client

        # Create necessary directories and set permissions
        RUN mkdir /run/mysqld && chown -R mysql:mysql /run/mysqld

        # Initialize database
        RUN mysql_install_db --user=mysql --datadir="/var/lib/mysql"

        # Add user configuration, works but have to do manually for some reason, this doesn't work in the Dockerfile
        RUN echo "GRANT ALL PRIVILEGES ON *.* TO '${MYSQL_ROOT_USER}'@'%' IDENTIFIED BY '${MYSQL_ROOT_PASSWORD}';" >> /setup.sql
        RUN echo "FLUSH PRIVILEGES;" >> /setup.sql
        RUN echo "CREATE DATABASE IF NOT EXISTS public" >> /setup.sql

        # Add configuration
        RUN sed -i 's/skip-networking/#skip-networking/g' /etc/my.cnf.d/mariadb-server.cnf
        RUN sed -i 's/#bind-address/bind-address/g' /etc/my.cnf.d/mariadb-server.cnf

        # Add a script to start MySQL and run setup.sql
        RUN echo -e "#!/bin/sh\n/usr/bin/mysqld --user=mysql --console &\nsleep 5\nmysql -u ${MYSQL_ROOT_USER} -p'${MYSQL_ROOT_PASSWORD}' < /setup.sql\nwhile true; do sleep 1000; done" > /start.sh
        RUN chmod +x /start.sh

        # Start MySQL service
        CMD ["/start.sh"]
    restart: always
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - 3306:3306
volumes:
  mysql_data: